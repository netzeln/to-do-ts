interface IPerson{
  name: string;
  email: string;
}

interface ITask{
  description: string;
  done: boolean;
  priority: string;
  markDone(): void;
  assignedTo?: IPerson
}

class Task implements ITask {
  done: boolean = false;
  constructor(public description: string, public priority: string, public assignedTo?: IPerson){}
  markDone(){
    this.done = true;
  }
}

class HomeTask extends Task {
  constructor(public description: string, public priority: string, public assignedTo?: IPerson){
    super(description, priority);
  }
}

class HobbyTask extends Task {
  constructor(public description: string){
    super(description, "low");
  }
}

class WorkTask extends Task {
  constructor(public dueDate: Date, public description: string, public priority: string, public assignedTo: IPerson){
    super(description, priority, assignedTo);
  }
}

var nic: IPerson = {
  name: "nic",
  email: "solidtimeofchange@yahoo.com"
}

var Tanklin: IPerson ={
  name: "Tanklin Franklin",
  email: "imaginary@notreal.biz"
}

var Hamilton: IPerson = {
  name: "alex",
  email: "CashMoney@1792treasury.gov"
}

var tasks =[];
tasks.push(new HomeTask("Do JS Homework", "High", nic));
tasks.push(new HomeTask("Scan Tax stuff", "High", Hamilton));
tasks.push(new HomeTask("Install Hose Holder", "low"));

tasks.push(new HobbyTask("Watch Daredevil"));
tasks.push(new HobbyTask("play on computer"));

var today = new Date();
var tomorrow = new Date();
tomorrow.setDate(today.getDate() + 1);
var nextDay = new Date();
nextDay.setDate(today.getDate() + 2);

tasks.push(new WorkTask(today, "Finish this lesson", "high", Tanklin));
tasks.push(new WorkTask(tomorrow, "learn Angular", "high", Tanklin));
tasks.push(new WorkTask(nextDay, "group work", "medium", nic));

console.log(tasks);
